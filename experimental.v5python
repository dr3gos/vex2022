{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nendgame = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nmrope = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nflywheel2 = Motor(Ports.PORT12, GearSetting.RATIO_18_1, True)\nspinner = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nleftback = Motor(Ports.PORT16, GearSetting.RATIO_18_1, True)\nrightback = Motor(Ports.PORT17, GearSetting.RATIO_18_1, True)\nlloader = Motor(Ports.PORT18, GearSetting.RATIO_18_1, False)\nrloader = Motor(Ports.PORT19, GearSetting.RATIO_18_1, True)\nmloader = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      [REDACTED] Feb. 2023 HS Robotics\n#\tAuthor:       Dragos S.\n#\tCreated:      6.12.2022 - 2.2.2023\n#\tDescription:  Vex V5 Code for the HS Robotics build, 2023\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\n#slloader\nlloader.set_stopping(HOLD)\nlloader.set_velocity(75, PERCENT)\n\n#srloader\nrloader.set_stopping(HOLD)\nrloader.set_velocity(75, PERCENT)\n\n#smloader\nmloader.set_stopping(HOLD)\nmloader.set_velocity(100, PERCENT)\n\n#sendgame\nendgame.set_stopping(BRAKE)\nendgame.set_max_torque(100, PERCENT)\nendgame.set_velocity(100, PERCENT)\n\n#smrope\nmrope.set_max_torque(70, PERCENT)\nmrope.set_velocity(100, PERCENT)\nmrope.set_stopping(BRAKE)\n\n#sflywheel1 (left)\n# flywheel.set_stopping(COAST)\n# flywheel.set_max_torque(100, PERCENT)\n# flywheel.set_velocity(100, PERCENT)\n\n#sflywheel2 (right)\n# flywheel2.set_stopping(COAST)\n# flywheel2.set_max_torque(100, PERCENT)\n# flywheel2.set_velocity(100, PERCENT)\n\n#sspinner\nspinner.set_stopping(BRAKE)\nspinner.set_max_torque(100, PERCENT)    \nspinner.set_velocity(100, PERCENT) \n\n#sleftback\nleftback.set_stopping(COAST)\nrightback.set_stopping(COAST)\n \n#functions:\n\ndef ropeing():\n    if controller_1.buttonA.pressing():\n        mrope.spin(FORWARD, 1000, VOLT)\n    elif controller_1.buttonX.pressing():\n        mrope.spin(REVERSE)\n    elif controller_1.buttonB.pressing():\n        mrope.stop()\n\n# def flywheeling():\n#     if controller_1.buttonA.pressing():\n#         #flywheel.spin(FORWARD, 1000, VOLT)\n#         #flywheel2.spin(FORWARD, 1000, VOLT)\n#     elif controller_1.buttonB.pressing():\n#         #flywheel.stop()\n#         #flywheel2.stop()\n\n# def endgameing():\n#     if controller_1.buttonX.pressing():\n#         endgame.spin_to_position(50, DEGREES)\n#         wait(1, MSEC)\n#     elif controller_1.buttonY.pressing():\n#         endgame.spin_to_position(0, DEGREES)\n#     else:\n#         endgame.stop()\n        \ndef spinning():\n    if controller_1.buttonR1.pressing():\n        spinner.spin(FORWARD)\n    elif controller_1.buttonL1.pressing(): \n        spinner.spin(REVERSE)\n    else:\n        spinner.stop()\n\ndef driving():\n    updown = controller_1.axis3.position()\n    leftright = controller_1.axis1.position()\n    leftback.set_velocity(((leftright * -1)  + (updown * 1)), PERCENT)\n    rightback.set_velocity(((leftright * -1) - (updown * 1)), PERCENT)\n    leftback.spin(FORWARD)\n    rightback.spin(FORWARD)\n\ndef loading():\n    if controller_1.buttonR2.pressing():\n        rloader.spin(FORWARD)\n        lloader.spin(FORWARD)\n        mloader.spin(FORWARD)\n    elif controller_1.buttonL2.pressing():\n        rloader.spin(REVERSE)\n        lloader.spin(REVERSE)\n        mloader.spin(REVERSE)\n    else:\n        rloader.stop()\n        lloader.stop()\n        mloader.stop()\n\n#autonomous code: \n\ndef autonomous():\n        leftback.set_velocity(-10, PERCENT)\n        rightback.set_velocity(-10, PERCENT)\n        #forward\n        rightback.spin(FORWARD)\n        leftback.spin(REVERSE)\n        wait(1.5, SECONDS)\n        rightback.stop()\n        leftback.stop()\n        wait(5, MSEC)\n        #turn right\n        rightback.spin(FORWARD)\n        leftback.spin(FORWARD)\n        wait(1.2, SECONDS)\n        rightback.stop()\n        leftback.stop()\n        wait(5, MSEC)\n        #go back + roller\n        rightback.spin(REVERSE)\n        leftback.spin(FORWARD)\n        wait(1.7, SECONDS)\n        spinner.spin_for(REVERSE, 0.3, TURNS, wait=True)\n        rightback.stop()\n        leftback.stop()\n        #cut here\n\n        # #forward\n        # rightback.spin(REVERSE)\n        # leftback.spin(FORWARD)\n        # wait(1.5, SECONDS)\n        # rightback.stop()\n        # leftback.stop()\n        # wait(5, MSEC)\n        # #turn right\n        # rightback.spin(REVERSE)\n        # leftback.spin(REVERSE)\n        # wait(1.2, SECONDS)\n        # rightback.stop()\n        # leftback.stop()\n        # wait(5, MSEC)\n        # #go back + roller\n        # rightback.spin(FORWARD)\n        # leftback.spin(REVERSE)\n        # wait(1, SECONDS)\n        # rightback.stop()\n        # leftback.stop()\n        # # wait(5, MSEC)\n\n        #turn right more\n        \n        leftback.set_velocity(-30, PERCENT)\n        rightback.set_velocity(-30, PERCENT)\n        rightback.spin(FORWARD)\n        leftback.spin(REVERSE)\n        wait(0.05, SECONDS)\n        rightback.spin(FORWARD)\n        leftback.spin(FORWARD)\n        wait(0.6, SECONDS)\n        rightback.stop()\n        leftback.stop()\n        wait(5,MSEC)\n        #go forward for box\n        leftback.set_velocity(-60, PERCENT)\n        rightback.set_velocity(-60, PERCENT)\n        rightback.spin(FORWARD)\n        leftback.spin(REVERSE)\n        wait(2, SECONDS)\n        rightback.stop()\n        leftback.stop()\n        wait(5,MSEC)\n        #discs go up\n        rloader.spin(REVERSE)\n        lloader.spin(REVERSE)\n        wait(5, SECONDS)\n        rloader.stop()\n        lloader.stop()\n        \n#sa imi bag pula in toate echipele astea de au avut timp\n\n#realtime code\nendgame.set_position(0, DEGREES)\nwhile 1:\n    if controller_1.buttonRight.pressing():\n        autonomous()\n    \n    if controller_1.buttonLeft.pressing():\n        while 1:\n            ropeing()\n            #endgameing()\n            #flywheeling()\n            spinning()\n            driving()\n            loading()\n            wait(5, MSEC)\n    wait(5, MSEC)","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[9],"name":"endgame","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[11],"name":"mrope","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[12],"name":"flywheel2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"spinner","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[16],"name":"leftback","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[17],"name":"rightback","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[18],"name":"lloader","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[19],"name":"rloader","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[20],"name":"mloader","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}